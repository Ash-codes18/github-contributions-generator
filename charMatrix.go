package main



import "fmt"

var lol map[string][][]int              // nil map of string-int pairs

//m1 := make(map[string]float64)      // Empty map of string-float64 pairs
//m2 := make(map[string]float64, 100) // Preallocate room for 100 entries

/*

m3 := map[string]float64{           // Map literal
    "e":  2.71828,
    "pi": 3.1416,
}
fmt.Println(len(m3))  

*/

var alphabet1 string= "abcdefghijklmnopurstuvwxyz"

var a = [][]int{   {0,0,0,0,0}, 
{0,0,1,1,0}, 
{0,0,0,0,1},
{0,0,1,1,1}, 
{0,1,0,0,1}, 
{0,0,1,1,1}, 
{0,0,0,0,0}}



var b = [][]int{   {0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,1,1,1,0},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,1,1,1,0}, 
{0,0,0,0,0}}


var c = [][]int{    {0,0,0,0,0}, 
{0,0,1,1,0}, 
{0,1,0,0,1},
{0,1,0,0,0}, 
{0,1,0,0,1}, 
{0,0,1,1,0}, 
{0,0,0,0,0}}

var d = [][]int{    {0,0,0,0,1}, 
{0,0,0,0,1}, 
{0,0,1,1,1},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,1,1,1}, 
{0,0,0,0,0}}

var e = [][]int{    {0,0,0,0,0}, 
{0,0,1,1,0}, 
{0,1,0,0,1},
{0,1,1,1,1}, 
{0,1,0,0,0}, 
{0,0,1,1,0}, 
{0,0,0,0,0}}

var f = [][]int{    {0,0,1,1,0}, 
{0,1,0,0,0}, 
{0,1,1,1,0},
{0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,0,0,0,0}}

var g = [][]int{    {0,0,0,0,0}, 
{0,0,1,1,1}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,0,1,1,1}, 
{0,0,0,0,1}, 
{0,0,1,1,0}}

var h = [][]int{    {0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,1,1,1,0},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,0,0,0}}

var i = [][]int{    {0,0,1,0,0}, 
{0,0,0,0,0}, 
{0,0,1,0,0},
{0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,0,0,0,0}}

var j = [][]int{  {0,0,0,0,0}, 
{0,0,0,1,0}, 
{0,0,0,0,0},
{0,0,0,1,0}, 
{0,0,0,1,0}, 
{0,0,0,1,0}, 
{0,1,1,0,0}}

var k = [][]int{  {0,1,0,0,0}, 
{0,1,0,1,0}, 
{0,1,1,0,0},
{0,1,1,0,0}, 
{0,1,0,1,0}, 
{0,1,0,1,0}, 
{0,0,0,0,0}}

var l = [][]int{   {0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,0,1,0,0},
{0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,0,0,1,0}, 
{0,0,0,0,0}}


var m = [][]int{    {0,0,0,0,0}, 
{1,1,1,1,0}, 
{1,0,1,0,1},
{1,0,1,0,1}, 
{1,0,1,0,1}, 
{1,0,1,0,1}, 
{0,0,0,0,0}}


var n = [][]int{    {0,0,0,0,0}, 
{0,1,1,1,0}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,0,0,0}}


var o = [][]int{  {0,0,0,0,0}, 
{0,0,1,1,0}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,1,1,0}, 
{0,0,0,0,0}}


var p = [][]int{  {0,0,0,0,0}, 
{0,0,1,1,0}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,1,1,1,0}, 
{0,1,0,0,0}, 
{0,1,0,0,0}}



var q = [][]int{   {0,0,0,0,0}, 
{0,1,1,0,0}, 
{1,0,0,1,0},
{1,0,0,1,0}, 
{0,1,1,1,0}, 
{0,0,0,1,0}, 
{0,0,0,1,0}}

var r = [][]int{    {0,0,0,0,0}, 
{0,1,0,1,1}, 
{0,1,1,0,0},
{0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,1,0,0,0}, 
{0,0,0,0,0}}  

var s = [][]int{    {0,0,0,0,0}, 
{0,0,1,1,1}, 
{0,1,0,0,0},
{0,0,1,1,0}, 
{0,0,0,0,1}, 
{0,1,1,1,0}, 
{0,0,0,0,0}}


var t = [][]int{    {0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,1,1,1,0},
{0,0,1,0,0}, 
{0,0,1,0,0}, 
{0,0,0,1,1}, 
{0,0,0,0,0}}


var u = [][]int{    {0,0,0,0,0}, 
{0,1,0,0,1}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,1,1,1}, 
{0,0,0,0,0}}


var v = [][]int{    {0,0,0,0,0}, 
{0,0,0,0,0}, 
{0,1,0,0,1},
{0,1,0,0,1}, 
{0,1,0,1,0}, 
{0,0,1,0,0}, 
{0,0,0,0,0}}

var w = [][]int{    {0,0,0,0,0}, 
{1,0,0,0,1}, 
{1,0,0,0,1},
{1,0,1,0,1}, 
{1,0,1,0,1}, 
{0,1,0,1,0}, 
{0,0,0,0,0}}


var x = [][]int{    {0,0,0,0,0}, 
{0,1,0,0,1}, 
{0,1,0,0,1},
{0,0,1,1,0}, 
{0,1,0,0,1}, 
{0,1,0,0,1}, 
{0,0,0,0,0}}



var y = [][]int{    {0,0,0,0,0}, 
{0,1,0,0,1}, 
{0,1,0,0,1},
{0,0,1,1,1}, 
{0,0,0,0,1}, 
{0,0,0,0,1}, 
{0,0,1,1,0}}

var z = [][]int{    {0,0,0,0,0}, 
{0,1,1,1,1}, 
{0,0,0,0,1},
{0,0,1,1,0}, 
{0,1,0,0,0}, 
{0,1,1,1,1}, 
{0,0,0,0,0}}

var alphabet = map[string][][]int{ 
	"a":  a,
	"b": b,
	"c": c,
	"d": d,
	"e": e,
	"f": f,
	"g": g,
	"h": h,
	"i": i,
	"j": j,
	"k": k,
	"l": l,
	"m": m,
	"n": n,
	"o": o,
	"p": p,
	"q": q,
	"r": r,
	"s": s,
	"t": t,
	"u": u,
	"v": v,
	"w": w,
	"x": x,
	"y": y,
	"z": z,
}

func ReturnMatrix(message string) [][]int {

	fmt.Println("")
	//fmt.Println("length ",len(alphabet))

	for i := 0; i < len(alphabet); i++ {
		_, found := alphabet[string(message[i])]    
		//fmt.Println(string(message[i]))
		if found {
			//fmt.Println(m3[string(alphabet1[i])])
			fmt.Println(string(message[i]))
			//fmt.Println(found)
			return alphabet[string(message[i])]
		}
	}
    
	return nil
}